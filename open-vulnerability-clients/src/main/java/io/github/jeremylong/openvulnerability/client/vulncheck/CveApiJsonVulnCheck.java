/*
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) 2023-2024 Jeremy Long. All Rights Reserved.
 */
package io.github.jeremylong.openvulnerability.client.vulncheck;

import com.fasterxml.jackson.annotation.*;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import io.github.jeremylong.openvulnerability.client.nvd.CveItem;
import io.github.jeremylong.openvulnerability.client.nvd.DefCveItem;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * JSON Schema for NVD Vulnerability Data API version 2.0
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonPropertyOrder({"resultsPerPage", "startIndex", "totalResults", "format", "version", "timestamp",
        "vulnerabilities"})
public class CveApiJsonVulnCheck implements Serializable {

    /**
     * Serialization version UID.
     */
    private static final long serialVersionUID = -7123674591462255117L;
    /**
     * (Required)
     */
    @JsonProperty("_meta")
    private Meta _meta;

    /**
     * (Required)
     */
    @JsonProperty("format")
    private String format;
    /**
     * (Required)
     */
    @JsonProperty("version")
    private String version;
    /**
     * (Required)
     */
    @JsonProperty("timestamp")
    @JsonFormat(pattern = "uuuu-MM-dd'T'HH:mm:ss.SSS", timezone = "UTC")
    private ZonedDateTime timestamp;
    /**
     * NVD feed array of CVE (Required)
     */
    @JsonProperty("data")
    @JsonPropertyDescription("NVD feed array of CVE")
    private List<CveItem> cveItems;

    public CveApiJsonVulnCheck() {
    }

    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public CveApiJsonVulnCheck(Integer resultsPerPage, Integer startIndex, Integer totalResults, String format, String version,
                               ZonedDateTime timestamp, List<DefCveItem> vulnerabilities) {
        this._meta = new Meta();
        this._meta.setPage(startIndex);
        this._meta.setLimit(resultsPerPage);
        this._meta.setTotalPages(totalResults);

        this.format = format;
        this.version = version;
        this.timestamp = timestamp;
        this.cveItems = vulnerabilities.stream().map(defCveItem -> defCveItem.getCve()).collect(Collectors.toList());
    }

    /**
     * (Required)
     *
     * @return totalResults
     */
    @JsonProperty("totalResults")
    public Integer getTotalResults() {
        return _meta.getTotalPages();
    }

    /**
     * (Required)
     *
     * @return format
     */
    @JsonProperty("format")
    public String getFormat() {
        return format;
    }

    /**
     * (Required)
     *
     * @return version
     */
    @JsonProperty("version")
    public String getVersion() {
        return version;
    }

    /**
     * (Required)
     *
     * @return timestamp
     */
    @JsonProperty("timestamp")
    public ZonedDateTime getTimestamp() {
        return timestamp;
    }

    /**
     * NVD feed array of CVE (Required)
     *
     * @return vulnerabilities
     */
    @JsonProperty("vulnerabilities")
    @SuppressFBWarnings(value = {"EI_EXPOSE_REP",
            "EI_EXPOSE_REP2"}, justification = "I prefer to suppress these FindBugs warnings")
    public List<CveItem> getVulnerabilities() {
        return cveItems;
    }

    @Override
    public String toString() {
        return "CveApiJson20{" + "resultsPerPage=" + getMeta().getTotalPages() + ", startIndex=" + getMeta().getCursor() + ", totalResults="
                + getTotalResults() + ", format='" + format + '\'' + ", version='" + version + '\'' + ", timestamp="
                + timestamp + ", vulnerabilities=" + getVulnerabilities() + '}';
    }

    public Meta getMeta() {
        return _meta;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        CveApiJsonVulnCheck that = (CveApiJsonVulnCheck) o;
        return Objects.equals(_meta, that._meta) && Objects.equals(format, that.format) && Objects.equals(version, that.version) && Objects.equals(timestamp, that.timestamp) && Objects.equals(cveItems, that.cveItems);
    }

    @Override
    public int hashCode() {
        return Objects.hash(_meta, format, version, timestamp, cveItems);
    }
}