package io.github.jeremylong.openvulnerability.client.nvd;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class CustomDateDeserializer extends JsonDeserializer<ZonedDateTime> {

    private static final DateTimeFormatter[] FORMATTERS = new DateTimeFormatter[]{
            DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSX"), // With nanoseconds and Z
            DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ss.SSSX"),       // With milliseconds and Z
            DateTimeFormatter.ISO_DATE_TIME                                   // General ISO-8601 format
    };

    @Override
    public ZonedDateTime deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        String dateStr = p.getText();
        for (DateTimeFormatter formatter : FORMATTERS) {
            try {
                var localDateTime = LocalDateTime.parse(dateStr, formatter);

                return localDateTime.atZone(ZoneId.systemDefault());
            } catch (DateTimeParseException e) {
                // Ignore and try the next pattern
            }
        }
        throw new IOException("Failed to parse date: " + dateStr);
    }
}
