package io.github.jeremylong.openvulnerability.client.vulncheck;

import io.github.jeremylong.openvulnerability.client.HttpAsyncClientSupplier;
import io.github.jeremylong.openvulnerability.client.nvd.NvdCveClientBuilder;
import io.github.jeremylong.openvulnerability.client.nvd.NvdCveClientBuilderNis;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public final class VulnCheckCveClientBuilder implements NvdCveClientBuilder {
    private static final Logger LOG = LoggerFactory.getLogger(VulnCheckCveClientBuilder.class);

    private String apiKey;
    private String endpoint;
    private long delay = 600;
    private int maxRetryCount = 10;
    private int maxPageCount = 0;
    private HttpAsyncClientSupplier httpClientSupplier;
    private String userAgent;

    private VulnCheckCveClientBuilder() {
    }

    public static NvdCveClientBuilder aVulnCheckCveApi() {
        return new VulnCheckCveClientBuilder();
    }

    @Override
    public NvdCveClientBuilder withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    @Override
    public NvdCveClientBuilder withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    @Override
    public NvdCveClientBuilder withDelay(long delay) {
        this.delay = delay;
        return this;
    }

    @Override
    public NvdCveClientBuilder withMaxRetryCount(int maxRetryCount) {
        this.maxRetryCount = maxRetryCount;
        return this;
    }

    @Override
    public NvdCveClientBuilder withThreadCount(int count) {
        LOG.warn("Thread count is not supported by the VulnCheck CVE API");
        return this;
    }

    public NvdCveClientBuilder withMaxPageCount(int maxPageCount) {
        this.maxPageCount = maxPageCount;
        return this;
    }

    @Override
    public NvdCveClientBuilder withResultsPerPage(int resultsPerPage) {
        LOG.warn("Results per page is not supported by the VulnCheck Backup CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withHttpClientSupplier(HttpAsyncClientSupplier supplier) {
        this.httpClientSupplier = supplier;
        return this;
    }

    @Override
    public NvdCveClientBuilder withFilter(String filter, String value) {
        LOG.warn("Filter is not supported by the VulnCheck Backup CVE API");
        return this;
    }

    /**
     * Add a querystring parameter to filter the call to the NVD CVE API.
     *
     * @param filter the querystring parameter
     * @param value  the querystring parameter value
     * @return the builder
     */
    public NvdCveClientBuilder withFilter(NvdCveClientBuilderNis.Filter filter, String value) {
        return withFilter(filter.toParameterName(), value);
    }

    /**
     * Add a querystring parameter to filter the call to the NVD CVE API.
     *
     * @param filter the querystring parameter
     * @return the builder
     */
    public NvdCveClientBuilder withFilter(NvdCveClientBuilderNis.BooleanFilter filter) {
        return withFilter(filter.toParameterName(), null);
    }

    /**
     * Use a range of no more than 120 days on the last modified dates to filter the results. The ZonedDateTime objects
     * must be set to UTC.
     *
     * @param utcStartDate the UTC date time for the range start
     * @param utcEndDate   the UTC date time for the range end
     * @return the builder
     */

    public NvdCveClientBuilder withLastModifiedFilter(ZonedDateTime utcStartDate, ZonedDateTime utcEndDate) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("uuuu-MM-dd");
        return withFilter("lastModStartDate", utcStartDate.format(dtf)).
                withFilter("lastModEndDate", utcEndDate.format(dtf));
    }

    @Override
    public NvdCveClientBuilder withAdditionalUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }

    @Override
    public NvdCveClientBuilder withPublishedDateFilter(ZonedDateTime utcStartDate, ZonedDateTime utcEndDate) {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("uuuu-MM-dd");

        return withFilter("pubStartDate", utcStartDate.format(dtf)).
                withFilter("pubEndDate", utcEndDate.format(dtf));
    }

    @Override
    public NvdCveClientBuilder withCvssV2SeverityFilter(NvdCveClientBuilderNis.CvssV2Severity severity) {
        LOG.warn("CVSS V2 is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withCvssV3SeverityFilter(NvdCveClientBuilderNis.CvssV3Severity severity) {
        LOG.warn("CVSS V3 is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withVirtualMatchString(String virtualMatchString) {
        LOG.warn("Virtual match string is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withVersionStart(String versionStart) {
        LOG.warn("Version start is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withVersionStart(String versionStart, NvdCveClientBuilderNis.VersionType startType) {
        LOG.warn("Version start is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withVersionEnd(String versionEnd) {
        LOG.warn("Version end is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public NvdCveClientBuilder withVersionEnd(String versionEnd, NvdCveClientBuilderNis.VersionType endType) {
        LOG.warn("Version end is not supported by the VulnCheck CVE API");
        return this;
    }

    @Override
    public VulnCheckBackupCveClient build() {
        //var client = new VulnCheckCveClient(apiKey, endpoint, delay, maxPageCount, maxRetryCount, httpClientSupplier, userAgent);
        var client = new VulnCheckBackupCveClient(apiKey, endpoint, delay, maxPageCount, maxRetryCount, httpClientSupplier, userAgent);

        return client;
    }
}