package io.github.jeremylong.openvulnerability.client.vulncheck;

import io.github.jeremylong.openvulnerability.client.PagedDataSource;
import io.github.jeremylong.openvulnerability.client.nvd.DefCveItem;
import io.github.jeremylong.openvulnerability.client.nvd.NvdCveClientBuilder;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Collection;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class VulnCheckCveClientIntegrationTest {
    ZonedDateTime retrieveLastUpdated() {
        // TODO implement a storage/retrieval mechanism.
        return ZonedDateTime.now(ZoneOffset.UTC).minusDays(5);
    }

    void storeLasUpdated(ZonedDateTime lastUpdated) {
        // TODO implement a storage/retrieval mechanism.
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.MINUTES)
    public void update() throws Exception {
        String apiKey = System.getenv("NVD_API_KEY");
        if (apiKey != null) {
            Assumptions.assumeFalse(apiKey.startsWith("op:"),
                    "env NVD_API_KEY found protected with 1password - skipping test");
        }

        ZonedDateTime lastModifiedRequest = retrieveLastUpdated();
        NvdCveClientBuilder builder = VulnCheckCveClientBuilder.aVulnCheckCveApi();

        if (lastModifiedRequest != null) {
            ZonedDateTime end = lastModifiedRequest.minusDays(-120);
            builder.withLastModifiedFilter(lastModifiedRequest, end);
        }
        // TODO add any additional filters via the builder's `withfilter()`

        try (PagedDataSource<DefCveItem> api = builder.withApiKey(apiKey).withMaxPageCount(10).build()) {
            int fetchedDocs = 0;
            while (api.hasNext()) {
                Collection<DefCveItem> items = api.next();
                fetchedDocs += items.size();

                System.out.printf("Total: %d, current: %d\n", api.getTotalAvailable(), fetchedDocs);

                assertFalse(items::isEmpty, "Should receive at least 1 item from first API call");

                items.stream().findFirst()
                        .ifPresent(i -> assertTrue(() -> i.getCve().getId() != null, "CVE ID should not be null"));
            }
            lastModifiedRequest = api.getLastUpdated();
        }
        storeLasUpdated(lastModifiedRequest);
    }
}
